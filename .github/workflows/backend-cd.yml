name: backend-continuous-deployment

# Ensure the workflow runs on manual trigger and on push to the main branch
on:
  workflow_dispatch:
  push:
    branches: 
      - main

env:
  # Set Python Version
  PYTHON_VERSION: '3.10'
  AWS_REGION: us-east-1

jobs:
  test:

    runs-on: ubuntu-latest

    steps:
      # Check out the code from the repository.
      - name: Check out repository
        uses: actions/checkout@v3

      # Set up a Python environment using the specified version.
      - name: Use Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{env.PYTHON_VERSION}}
          cache: 'pipenv'
          cache-dependency-path: 'starter/backend/Pipfile.lock'

      - name: Install Pipenv
        run: cd starter/backend && pip install pipenv

      # Install the dependencies.
      - run: cd starter/backend && pipenv install

      # Run the tests.
      - run: cd starter/backend && pipenv run test

      # Send a console message at completion.
      - run: |
          echo "Hello ${{github.actor}}. Successfully completed test job."

  lint:

    runs-on: ubuntu-latest

    steps:
      # Check out the code from the repository.
      - name: Check out repository
        uses: actions/checkout@v3

      # Set up a Python environment using the specified version.
      - name: Use Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{env.PYTHON_VERSION}}
          cache: 'pipenv'
          cache-dependency-path: 'starter/backend/Pipfile.lock'

      - name: Install Pipenv
        run: cd starter/backend && pip install pipenv

      # Install the dependencies.
      - run: cd starter/backend && pipenv install

      # Install flake8 after setting up Python
      - name: Install dependencies
        run: cd starter/backend && pip install flake8

      # Run the linter.
      - run: cd starter/backend && pipenv run lint

      # Send a console message at completion.
      - run: |
          echo "Hello ${{github.actor}}. Successfully completed lint job."

  build:
    needs: [test, lint]
    runs-on: ubuntu-latest
    steps:
      # Check out the code from the repository.
      - name: Check out repository
        uses: actions/checkout@v3

      # Set up a Python environment using the specified version.
      - name: Use Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{env.PYTHON_VERSION}}
          cache: 'pipenv'
          cache-dependency-path: 'starter/backend/Pipfile.lock'

      - name: Install Pipenv
        run: cd starter/backend && pip install pipenv

      # Install the dependencies.
      - run: cd starter/backend && pipenv install

      # Run the tests.
      - run: cd starter/backend && pipenv run test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Build docker image
      - name: Build docker image
        run: |
          cd starter/backend && docker build --tag mp-backend:latest .
          echo "Docker image is buit successfully."   

      # Send a console message at completion.
      - run: |
          echo "Hello ${{github.actor}}. Successfully completed build job."

  deploy:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      # Check out the code from the repository.
      - name: Check out repository
        uses: actions/checkout@v3
      
      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # Use your stored AWS Access Key ID
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # Use your stored AWS Secret Access Key
          aws-region: ${{ env.AWS_REGION }} 

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: backend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd starter/backend && docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "Docker image is pushed into ECR successfully."

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'latest'

      - name: Setup Kustomize
        uses: multani/action-setup-kustomize@v1
        with:
          version: 5.0.0

      - name: Deploy image to EKS
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: backend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd starter/backend/k8s && aws eks update-kubeconfig --name cluster
          kustomize edit set image backend=431904867259.dkr.ecr.us-east-1.amazonaws.com/backend:$IMAGE_TAG
          kustomize build | kubectl apply -f -
          echo "Docker image is deployed into EKS successfully."

      # Send a console message at completion.
      - run: |
          echo "Hello ${{github.actor}}. Successfully completed deploy job."
        
